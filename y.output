Useless nonterminals

   logical_OR_expression
   logical_AND_expression
   equality_expression
   relational_expression
   additive_expression
   multiplicative_expression


Terminals which are not used

   IF_T
   ELSE_T
   FOREACH_T
   IN_T
   BREAK_T
   AND_T
   OR_T
   NOT_T
   LEQ_REL_OP
   GEQ_REL_OP
   NEQ_REL_OP
   EQ_REL_OP
   NL
   REL_OP
   '+'
   '-'
   '*'
   '/'
   '<'
   '>'
   '%'


Useless rules

   27 assignment_expression: logical_OR_expression

   28 logical_OR_expression: logical_AND_expression
   29                      | logical_OR_expression OR_T logical_AND_expression

   30 logical_AND_expression: equality_expression
   31                       | logical_AND_expression AND_T equality_expression

   32 equality_expression: relational_expression
   33                    | equality_expression EQ_REL_OP equality_expression
   34                    | equality_expression NEQ_REL_OP equality_expression

   35 relational_expression: relational_expression '<' additive_expression
   36                      | relational_expression '>' additive_expression
   37                      | relational_expression LEQ_REL_OP additive_expression
   38                      | relational_expression GEQ_REL_OP additive_expression

   39 additive_expression: multiplicative_expression
   40                    | additive_expression '+' multiplicative_expression
   41                    | additive_expression '-' multiplicative_expression

   42 multiplicative_expression: multiplicative_expression '*' postfix_expression
   43                          | multiplicative_expression '/' postfix_expression
   44                          | multiplicative_expression '%' postfix_expression


Grammar

    0 $accept: declarator_list $end

    1 declarator_list: declarator
    2                | declarator_list declarator

    3 declarator: primitive_declarator ';'
    4           | derived_type_declarator ';'

    5 primitive_declarator: type_specifier ID
    6                     | type_specifier ID '=' initializer

    7 derived_type_declarator: NEW_T derived_type_specifier ID

    8 initializer: assignment_expression

    9 assignment_expression: '=' postfix_expression

   10 argument_expression_list: assignment_expression
   11                         | argument_expression_list ',' assignment_expression

   12 postfix_expression: primary_expression
   13                   | postfix_expression '(' argument_expression_list ')'
   14                   | postfix_expression '(' ')'

   15 primary_expression: constant
   16                   | ID
   17                   | STRING_T

   18 constant: NUM

   19 type_specifier: INT_T
   20               | DOUBLE_T
   21               | TIME_T
   22               | DAY_T
   23               | derived_type_specifier

   24 derived_type_specifier: SCHEDULE_T
   25                       | COURSE_T
   26                       | COURSELIST_T


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40) 13 14
')' (41) 13 14
'*' (42)
'+' (43)
',' (44) 11
'-' (45)
'/' (47)
';' (59) 3 4
'<' (60)
'=' (61) 6 9
'>' (62)
error (256)
IF_T (258)
ELSE_T (259)
NEW_T (260) 7
FOREACH_T (261)
IN_T (262)
BREAK_T (263)
SCHEDULE_T (264) 24
COURSE_T (265) 25
COURSELIST_T (266) 26
INT_T (267) 19
DOUBLE_T (268) 20
TIME_T (269) 21
DAY_T (270) 22
STRING_T (271) 17
AND_T (272)
OR_T (273)
NOT_T (274)
LEQ_REL_OP (275)
GEQ_REL_OP (276)
NEQ_REL_OP (277)
EQ_REL_OP (278)
ID (279) 5 6 7 16
NL (280)
NUM (281) 18
REL_OP (282)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
declarator_list (41)
    on left: 1 2, on right: 0 2
declarator (42)
    on left: 3 4, on right: 1 2
primitive_declarator (43)
    on left: 5 6, on right: 3
derived_type_declarator (44)
    on left: 7, on right: 4
initializer (45)
    on left: 8, on right: 6
assignment_expression (46)
    on left: 9, on right: 8 10 11
argument_expression_list (47)
    on left: 10 11, on right: 11 13
postfix_expression (48)
    on left: 12 13 14, on right: 9 13 14
primary_expression (49)
    on left: 15 16 17, on right: 12
constant (50)
    on left: 18, on right: 15
type_specifier (51)
    on left: 19 20 21 22 23, on right: 5 6
derived_type_specifier (52)
    on left: 24 25 26, on right: 7 23


state 0

    0 $accept: . declarator_list $end

    NEW_T         shift, and go to state 1
    SCHEDULE_T    shift, and go to state 2
    COURSE_T      shift, and go to state 3
    COURSELIST_T  shift, and go to state 4
    INT_T         shift, and go to state 5
    DOUBLE_T      shift, and go to state 6
    TIME_T        shift, and go to state 7
    DAY_T         shift, and go to state 8

    declarator_list          go to state 9
    declarator               go to state 10
    primitive_declarator     go to state 11
    derived_type_declarator  go to state 12
    type_specifier           go to state 13
    derived_type_specifier   go to state 14


state 1

    7 derived_type_declarator: NEW_T . derived_type_specifier ID

    SCHEDULE_T    shift, and go to state 2
    COURSE_T      shift, and go to state 3
    COURSELIST_T  shift, and go to state 4

    derived_type_specifier  go to state 15


state 2

   24 derived_type_specifier: SCHEDULE_T .

    $default  reduce using rule 24 (derived_type_specifier)


state 3

   25 derived_type_specifier: COURSE_T .

    $default  reduce using rule 25 (derived_type_specifier)


state 4

   26 derived_type_specifier: COURSELIST_T .

    $default  reduce using rule 26 (derived_type_specifier)


state 5

   19 type_specifier: INT_T .

    $default  reduce using rule 19 (type_specifier)


state 6

   20 type_specifier: DOUBLE_T .

    $default  reduce using rule 20 (type_specifier)


state 7

   21 type_specifier: TIME_T .

    $default  reduce using rule 21 (type_specifier)


state 8

   22 type_specifier: DAY_T .

    $default  reduce using rule 22 (type_specifier)


state 9

    0 $accept: declarator_list . $end
    2 declarator_list: declarator_list . declarator

    $end          shift, and go to state 16
    NEW_T         shift, and go to state 1
    SCHEDULE_T    shift, and go to state 2
    COURSE_T      shift, and go to state 3
    COURSELIST_T  shift, and go to state 4
    INT_T         shift, and go to state 5
    DOUBLE_T      shift, and go to state 6
    TIME_T        shift, and go to state 7
    DAY_T         shift, and go to state 8

    declarator               go to state 17
    primitive_declarator     go to state 11
    derived_type_declarator  go to state 12
    type_specifier           go to state 13
    derived_type_specifier   go to state 14


state 10

    1 declarator_list: declarator .

    $default  reduce using rule 1 (declarator_list)


state 11

    3 declarator: primitive_declarator . ';'

    ';'  shift, and go to state 18


state 12

    4 declarator: derived_type_declarator . ';'

    ';'  shift, and go to state 19


state 13

    5 primitive_declarator: type_specifier . ID
    6                     | type_specifier . ID '=' initializer

    ID  shift, and go to state 20


state 14

   23 type_specifier: derived_type_specifier .

    $default  reduce using rule 23 (type_specifier)


state 15

    7 derived_type_declarator: NEW_T derived_type_specifier . ID

    ID  shift, and go to state 21


state 16

    0 $accept: declarator_list $end .

    $default  accept


state 17

    2 declarator_list: declarator_list declarator .

    $default  reduce using rule 2 (declarator_list)


state 18

    3 declarator: primitive_declarator ';' .

    $default  reduce using rule 3 (declarator)


state 19

    4 declarator: derived_type_declarator ';' .

    $default  reduce using rule 4 (declarator)


state 20

    5 primitive_declarator: type_specifier ID .
    6                     | type_specifier ID . '=' initializer

    '='  shift, and go to state 22

    $default  reduce using rule 5 (primitive_declarator)


state 21

    7 derived_type_declarator: NEW_T derived_type_specifier ID .

    $default  reduce using rule 7 (derived_type_declarator)


state 22

    6 primitive_declarator: type_specifier ID '=' . initializer

    '='  shift, and go to state 23

    initializer            go to state 24
    assignment_expression  go to state 25


state 23

    9 assignment_expression: '=' . postfix_expression

    STRING_T  shift, and go to state 26
    ID        shift, and go to state 27
    NUM       shift, and go to state 28

    postfix_expression  go to state 29
    primary_expression  go to state 30
    constant            go to state 31


state 24

    6 primitive_declarator: type_specifier ID '=' initializer .

    $default  reduce using rule 6 (primitive_declarator)


state 25

    8 initializer: assignment_expression .

    $default  reduce using rule 8 (initializer)


state 26

   17 primary_expression: STRING_T .

    $default  reduce using rule 17 (primary_expression)


state 27

   16 primary_expression: ID .

    $default  reduce using rule 16 (primary_expression)


state 28

   18 constant: NUM .

    $default  reduce using rule 18 (constant)


state 29

    9 assignment_expression: '=' postfix_expression .
   13 postfix_expression: postfix_expression . '(' argument_expression_list ')'
   14                   | postfix_expression . '(' ')'

    '('  shift, and go to state 32

    $default  reduce using rule 9 (assignment_expression)


state 30

   12 postfix_expression: primary_expression .

    $default  reduce using rule 12 (postfix_expression)


state 31

   15 primary_expression: constant .

    $default  reduce using rule 15 (primary_expression)


state 32

   13 postfix_expression: postfix_expression '(' . argument_expression_list ')'
   14                   | postfix_expression '(' . ')'

    '='  shift, and go to state 23
    ')'  shift, and go to state 33

    assignment_expression     go to state 34
    argument_expression_list  go to state 35


state 33

   14 postfix_expression: postfix_expression '(' ')' .

    $default  reduce using rule 14 (postfix_expression)


state 34

   10 argument_expression_list: assignment_expression .

    $default  reduce using rule 10 (argument_expression_list)


state 35

   11 argument_expression_list: argument_expression_list . ',' assignment_expression
   13 postfix_expression: postfix_expression '(' argument_expression_list . ')'

    ','  shift, and go to state 36
    ')'  shift, and go to state 37


state 36

   11 argument_expression_list: argument_expression_list ',' . assignment_expression

    '='  shift, and go to state 23

    assignment_expression  go to state 38


state 37

   13 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $default  reduce using rule 13 (postfix_expression)


state 38

   11 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 11 (argument_expression_list)
