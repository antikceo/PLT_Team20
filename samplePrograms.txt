/* NOTES: user-def func would be awesome
** idea: schedules have sections; courselists have courses?
*/

/******** BASICS ********/
/* CREATE a new SCHEDULE */
new schedule sched;

/* READ the INPUT FILE with all the course information,
*  and put that into a courselist called CL */
new courselist CL = generateCourses(input_file);

/* ADD COURSES to the schedule according to some algorithm */
foreach course c in CL {
    if (sched.length() < 5
        && !(sched.conflict( c )))
    {
 	   sched.add( c );
    }
    else
    {
 	   print("you got a conflict there");
    }
}

/* PRINT the SCHEDULE in some readable format */
sched.print();


/******** GROUPS ********/

/* CREATE a LIST of required classes */
new courselist required;
required.add( CL.getCourse("Math") );
required.add( CL.getCourse("Stat") );

/* Create a list of elective classes */
new courselist electives;
electives.add( CL.getCourse("PE") );
electives.add( CL.getCourse("ArtHum") );

/* ADD COURSES from the list of required courses
*  only as long as the schedule has 3 or fewer courses
*  and the courses do not conflict */
foreach course c in required {
    if (sched.length() <= 3 && !(sched.conflict( c ))) {
 	   sched.add( c );
    }
}

/* Same as above, but for elective courses
*  and only adding until the schedule has 5 courses */
foreach course c in electives {
    if (sched.length() <= 5 && !(sched.conflict( c ))) {
 	   sched.add( c );
    }
}

/******** CONSTRAINTS ********/

/* Creating some int variables */
int courseMax = 6; // maximum number of courses
int courseMin = 4; // minimum
int creditMax = 20; // maximum number of credit points
int courseMaxR = 2 // maximum number of courses on Thursday

/* Add classes only if conditions are met */
foreach course c in CL
{
    if (sched.numCourses() <= courseMax 
        && sched.numCredits() + c.numCredits() <= 20)
    {
	if (c.getDay() == [R]
	    && sched.numCourses([R]) >= courseMaxR) {
    		break;
	}
	else {
    		sched.add( c );
	}
    }
} 

/* PRINT some STRING output */
if (sched.numCourses() < courseMin)
    print("Four non-conflicting classes could not be found. Add more potential courses!");

/******** SECTION SELECTION ********/

/* 
** PLT has two sections:
** MW 1:10-2:25 (this one would be taught by Aho)
** TR 2:40-3:55 (this one would be taught by Bob)
**
** CS Theory as two sections:
** TR 4:10-5:25 (taught by Aho)
** MW 6:10-7:25 (taught by Cat)
*/

/* Create a list for Aho’s classes */
new courselist Aho;

/* Add his sections of PLT and CSTheory, respectively */
new course PLT = CL.getCourse("PLT");
if ( PLT.hasDatetime( [M,W] 1:10~2:25 ) ) {
	myPLT = PLT;
	mySchedule.add( myPLT, [M,W] 1:10~2:25 );
	mySchedule.add( myPLT ); // adding whatever section works
}

mySchedule.add( myCalc3 );

mySchedule.make();

/******** SEARCH BY NAME ********/

// make a list of courses called music
new courselist music;

// if course name begins with MUSI, then add it to the music list
foreach course c in CL {
    string cname = c.name();
    if ( cname.substring(0,4) == "MUSI" ) {
 	   music.add( c );
    }
}